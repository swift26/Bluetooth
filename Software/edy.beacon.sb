// Copyright (c) 2014, Laird
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
// This script will send alternating iBeacon and EddyStone advertisements, it shows how to
// format both iBeacon and EddyStone UID and URL AD records. 
//
// These adverts are static and any changes need to be made to the #define values below and the 
//  script will need to be recompiled and loaded to either a BT900, BL600, BL652 or BL654 module. 
//
// To calibrate the beacon you will use nRF Master Control Panel for Android and iOS. Measure the
// TX power at 1m for iBeacon and at 0m for EddyStone and enter the resulting values at lines 
// 55 and 56 below.
// 
//******************************************************//
// Device Name
//******************************************************//
#define DEVICE_NAME        "Lyvt"
//******************************************************//
//------------------------------------------------------//

//*******************************************************//
//-------------------------------------------------------//
//*******************************************************//
// TX power
// Required for EddyStone (@0m)
//=======================================================//
// Valid values: -90 to +8dBm in hexadecimal using a 
// 2's complement value for negative numbers
// Example: +4dBm = 0x04
//          -4dBm = 0xFC
//*******************************************************//
#define TX_PWR_EDDY        0xE2
//*******************************************************//
//-------------------------------------------------------//
//*******************************************************//
// EddyStone Specific Settings
//*******************************************************//

//Eddystone Service UUID
#define EDDY_SVC_UUID      0xFEAA

//EddyStone Frame Types
#define UID                0x00
#define URL                0x10
#define TLM                0x20
#define EID                0x30

//EddyStone UID NameSpace
//First 10 bytes SHA-1 Hash Conversion of 'lairdtech.com'
#define EDDY_NAMESPACE     "\A0\14\C1\89\8B\D7\AB\0A\56\B0"

//EddyStone UID Instance
#define EDDY_INSTANCE      "\01\02\03\04\05\06"

//EddyStone URL Prefix Encoding: http://www.
#define HTTP               0x00
//======================================================//
// Other URL Prefix Encodings:
//======================================================//
// https://www.            0x01
// http://                 0x02
// https://                0x03
//======================================================//

//EddyStone URL Identifier Encoding: .com/
#define COM                0x00
//======================================================//
// Other URL Identifier Encodings:
//======================================================//
// .org/                   0x01
// .edu/                   0x02
// .net/                   0x03
// .info/                  0x04
// .biz/                   0x05
// .gov/                   0x06
// .com                    0x07
// .org                    0x08
// .edu                    0x09
// .net                    0x0A
// .info                   0x0B
// .biz                    0x0C
// .gov                    0x0D
//======================================================//

//EddyStone URL
#define EDDY_URL           "lyvt"

//AD Record Tags    
#define FLAGS              0x01
#define COMPLETE_LCL_NAME  0x09

//Manufacturer Specific Data is required for iBeacon
#define MANF_DATA          0xFF

//16 bit Service Data is required for EddyStone
#define SVC_DATA_16BIT     0x16

//Advert Type ADV_SCAN
//Could be ADV_NONCONN if no scan reports are used
//Could also be ADV_IND if connectable for configuration 
#define ADV_TYPE           2

//Advert Interval, time between successive Adverts
#define ADV_INTVL          250

//Advert Timeout
#define ADV_TMOUT          2000

//Appearance of tag 512 == Generic tag
#define APPEARANCE         512

//General Discoverability; Limited Discoverability == 1
#define DISCOVER_MODE      2

//Connection values needed for GAP service regardless 
//of whether connectable or not
#define MIN_CONN_INTVL     15000    
#define MAX_CONN_INTVL     25000
#define CONN_SUP_TIMEOUT   750000
#define SLAVE_LATENCY      5

//Device Information Service info
#define MANF_NAME          "Lyvt"
#define MODEL              "Beacon"
#define SERIAL_NUM         "0001"
#define HW_REV             "0.1"
#define APP_REV            "0.1" 
#define SYSID              ""
#define REGLST             ""
#define PPID               ""

//The temperature sensor is polled this timeout
#define TEMPERATURE_POLL_MS     (1000)

//SIO that the temperature sensor is connected to
#define GPIO_TEMP_SENSOR        3

//--------------------------------------------------------------------------------------
// Global Variable Declarations
//--------------------------------------------------------------------------------------
dim rc
//adRpt$ and scanRpt$ for iBeacon adverts
dim adRpt$ : adRpt$ = ""
dim scanRpt$ : scanRpt$ = ""
//adRptE$ and scanRptE$ for EddyStone adverts
dim adRptE$ : adRptE$ = ""
dim scanRptE$ : scanRptE$ = ""
dim stRsp$ as string  //Uart rx data is stored here
dim oldadc : oldadc = 0
dim oldbat : oldbat = 0

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
//==============================================================================
sub AssertRC(byval rc as integer,byval tag as integer)
  if (rc!=0) then
    print "Failed with ";integer.h' rc;" at tag ";tag;"\n"
  endif
endsub

//==============================================================================
//==============================================================================
sub DbgMsg(byval msg$ as string)
  print msg$
endsub

//==============================================================================
//==============================================================================
sub DbgVal(val)
  print val
endsub

//==============================================================================
//==============================================================================
sub InitTempSensor()
  //Poll sensor on a timer
  TimerStart(2,TEMPERATURE_POLL_MS,1)

  //Setup temperature sensor
  rc = GpioSetFunc(GPIO_TEMP_SENSOR,1,2)  //Remove the pull resistor
  AssertRC(rc, 86)

  //First byte selects the gain (default, 1/6 scaling)
  //Second byte selects the resolution (12-bit)
  //Third byte selects the acquisition time (default).
  //See the BL654 extension manual for further details
  rc = GPIOSETFUNCEX(GPIO_TEMP_SENSOR, 3, "\00\0C\00")
  AssertRC(rc, 93)
endsub

// -----------------------------------------------------------------------------
// Bandgap = 600mv
// Max Adc = 1024 (8-bit mode), 2048 (10-bit mode), 4096 (12-bit mode)
// Gain scaled by 1/6 (Please see the BL654 manual for additional options)
//
// Hence mV = (((adc/MaxADC) * Bandgap)*6)/1
// refactoring for integer maths gives
//  mv = (adc * Bandgap * 6)/(MaxADC)
//  mv = (adc * 600 * 6)/1024 [8-bit mode]
//  mv = (adc * 600 * 6)/2048 [10-bit mode]
//  mv = (adc * 600 * 6)/4096 [12-bit mode]
// -----------------------------------------------------------------------------
function Adc2Mv(adc)
    //By default, ADC pins are in 8-bit mode. This application uses 12-bit mode.

    //8-bit resolution
    //adc = (adc*225)/16

    //10-bit resolution
    //adc = (adc*225)/64

    //12-bit resolution
    adc = (adc*225)/256
endfunc adc

//-----------------------------------------------------------------------------
// Returns temperature in celsius times by 10 (260 = 26.0c)
//-----------------------------------------------------------------------------
function Mv2Temperature(mv)
    mv = ((mv*100 - 185830) / -117)
endfunc mv

//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when TIMER 0 expires
//==============================================================================
function HandlerTimer2() as integer
  dim mVadc,mVbat,tmp
  
  oldadc = Adc2Mv(GpioRead(GPIO_TEMP_SENSOR))
  DbgMsg("\nAdc mV=") : DbgVal(oldadc)

  //tmp = Mv2Temperature(mv)
  //DbgMsg("\nTemperature=") : DbgVal(tmp)
  //DbgMsg("\noldadc=") : DbgVal(oldadc)
  //oldadc = mvadc
  
  oldbat = ReadPwrSupplyMv()
  DbgMsg("\nBat mV=") : DbgVal(oldbat)
  
endfunc 1

Function EddyStone1$()
// Build EddyStone UID String
//----------------------------------------------------
//Format:
    // 0 1  2  3  4 5 6 7 8 9 0 1 2 3  4 5 6 7 8 9  
    // EddyStone_Svc_UUID
    //      Frame_Type
    //         TX_Power    
    //            EddyStone_Namespace
    //                                 EddyStone_Instance
    // AAFE 00 E2 A014C1898BD7AB0A56B0 010203040506 
//----------------------------------------------------
    dim eddy1$, feddy1$

    rc = BleEncode16(eddy1$,EDDY_SVC_UUID,0)
    rc = BleEncode8(eddy1$,UID,2)
    rc = BleEncode8(eddy1$,TX_PWR_EDDY,3)
    feddy1$ = eddy1$ + EDDY_NAMESPACE + EDDY_INSTANCE
endfunc feddy1$


Function EddyStone2$()
// Build EddyStone UID String
//------------------------------------------------------------------
//Format:
    // 0 1  2  3  4 5 6 7 8 9 0 1 2 3 4 5
    // EddyStone_Svc_UUID
    //      Frame_Type
    //         TX_Power
    //            EddyStone_URL
    // AAFE 10 E2 00646576696365776F727800
//------------------------------------------------------------------
    dim eddy2$, http$, com$, feddy2$, adcval$, batval$

    rc = BleEncode16(eddy2$,EDDY_SVC_UUID,0)
    rc = BleEncode8(eddy2$,URL,2)
    rc = BleEncode8(eddy2$,TX_PWR_EDDY,3)
    rc = BleEncode8(http$,HTTP,0)
    rc = BleEncode8(com$,COM,0)
	SPRINT #adcval$, oldadc
	SPRINT #batval$, oldbat

    feddy2$ = eddy2$ + http$ + EDDY_URL + com$ + adcval$ + "/" + batval$
endfunc feddy2$

Sub Startup()
    rc = BleGapSvcInit(DEVICE_NAME,0,APPEARANCE,MIN_CONN_INTVL,MAX_CONN_INTVL,CONN_SUP_TIMEOUT,SLAVE_LATENCY)
    rc = BleSvcRegDevInfo(MANF_NAME,MODEL,SERIAL_NUM,HW_REV,APP_REV,SYSID,REGLST,PPID)
endsub

Sub BuildAdverts()
    dim EddyAD1$ : EddyAD1$ = EddyStone1$()
    dim EddyAD2$ : EddyAD2$ = EddyStone2$()
    dim devname$ : devname$ = DEVICE_NAME

    //Initialize adRptE$ and scanRptE$ for EddyStone
    rc = BleAdvRptInit(adRptE$,DISCOVER_MODE,0,0)
    rc = BleScanRptInit(scanRptE$)

    //Build EddyStone Advert and Scan AD elements
    rc = BleAdvRptAddUuid16(adRptE$,EDDY_SVC_UUID,-1,-1,-1,-1,-1)
    rc = BleAdvRptAppendAD(adRptE$,SVC_DATA_16BIT,EddyAD1$)
    rc = BleAdvRptAppendAD(scanRptE$,SVC_DATA_16BIT,EddyAD2$)
    rc = BleAdvRptAppendAD(scanRptE$,COMPLETE_LCL_NAME,devname$)
endsub

Function StartAds()
    dim peer$ : peer$ = ""
	BuildAdverts() //build the advertisement packet again to send the updated data.
    rc = BleAdvRptsCommit(adRptE$,scanRptE$)
    rc = BleAdvertStart(ADV_TYPE,peer$,ADV_INTVL,ADV_TMOUT,0)
endfunc 1

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
ONEVENT EVBLE_ADV_TIMEOUT    CALL    StartAds
OnEvent  EVTMR2             call HandlerTimer2

rc = BleTxPowerSet(8)
Startup()
InitTempSensor()
BuildAdverts()
rc = StartAds()

WaitEvent
